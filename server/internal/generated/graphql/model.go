// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Download struct {
	ID        string         `json:"id"`
	UserID    string         `json:"userId"`
	Link      string         `json:"link"`
	Status    DownloadStatus `json:"status"`
	Progress  *float64       `json:"progress"`
	CreatedAt time.Time      `json:"createdAt"`
	UpdatedAt *time.Time     `json:"updatedAt"`
}

type DownloadStatus string

const (
	DownloadStatusDone       DownloadStatus = "DONE"
	DownloadStatusInprogress DownloadStatus = "INPROGRESS"
	DownloadStatusNotstarted DownloadStatus = "NOTSTARTED"
	DownloadStatusError      DownloadStatus = "ERROR"
)

var AllDownloadStatus = []DownloadStatus{
	DownloadStatusDone,
	DownloadStatusInprogress,
	DownloadStatusNotstarted,
	DownloadStatusError,
}

func (e DownloadStatus) IsValid() bool {
	switch e {
	case DownloadStatusDone, DownloadStatusInprogress, DownloadStatusNotstarted, DownloadStatusError:
		return true
	}
	return false
}

func (e DownloadStatus) String() string {
	return string(e)
}

func (e *DownloadStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DownloadStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DownloadStatus", str)
	}
	return nil
}

func (e DownloadStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
